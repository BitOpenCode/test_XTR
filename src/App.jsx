import React, { useState, useEffect } from 'react';
import { ShoppingCart, Star, Zap, CheckCircle, XCircle, Loader } from 'lucide-react';
import axios from 'axios';
import './index.css';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const WEBHOOK_URL = 'https://n8n-p.blc.am/webhook-test/xp-purchase?v=' + Date.now();

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è —Å —Å–µ—Ä–≤–µ—Ä–∞)
const PRODUCTS = [
  {
    id: 1,
    name: '–°—Ç–∞—Ä—Ç–æ–≤—ã–π –ø–∞–∫–µ—Ç',
    xp: 5000,
    price: 100,
    description: '–ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã',
    featured: false
  },
  {
    id: 2,
    name: '–ë–∞–∑–æ–≤—ã–π –ø–∞–∫–µ—Ç',
    xp: 10000,
    price: 200,
    description: '–•–æ—Ä–æ—à–∏–π –±–∞–ª–∞–Ω—Å —Ü–µ–Ω—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞',
    featured: true
  },
  {
    id: 3,
    name: '–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞–∫–µ—Ç',
    xp: 15000,
    price: 300,
    description: '–î–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –∏–≥—Ä–æ–∫–æ–≤',
    featured: false
  },
  {
    id: 4,
    name: '–ü—Ä–µ–º–∏—É–º –ø–∞–∫–µ—Ç',
    xp: 20000,
    price: 400,
    description: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã–≥–æ–¥–∞',
    featured: false
  },
  {
    id: 5,
    name: '–ú–µ–≥–∞ –ø–∞–∫–µ—Ç',
    xp: 100000,
    price: 860,
    description: '–î–ª—è —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤',
    featured: true
  },
  {
    id: 6,
    name: '–°—É–ø–µ—Ä –ø–∞–∫–µ—Ç',
    xp: 200000,
    price: 1660,
    description: '–û–≥—Ä–æ–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ XP',
    featured: false
  },
  {
    id: 7,
    name: '–≠–ª–∏—Ç–Ω—ã–π –ø–∞–∫–µ—Ç',
    xp: 500000,
    price: 4390,
    description: '–î–ª—è —ç–ª–∏—Ç–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤',
    featured: false
  },
  {
    id: 8,
    name: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –ø–∞–∫–µ—Ç',
    xp: 1000000,
    price: 6420,
    description: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ XP',
    featured: true
  }
];

function App() {
  const [selectedProduct, setSelectedProduct] = useState(null);
  const [showModal, setShowModal] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [message, setMessage] = useState(null);
  const [userInfo, setUserInfo] = useState({
    tgid: 123456789, // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –∏–∑ Telegram
    first_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
    username: 'user',
    current_xp: 0
  });

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞)
  useEffect(() => {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
  }, []);

  const handleBuyClick = (product) => {
    setSelectedProduct(product);
    setShowModal(true);
    setMessage(null);
  };

  const handleConfirmPurchase = async () => {
    if (!selectedProduct) return;
    
    if (!userInfo.tgid) {
      setMessage({
        type: 'error',
        text: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram ID'
      });
      return;
    }

    setIsLoading(true);
    setMessage(null);

    try {
      const purchaseData = {
        tgid: userInfo.tgid,
        product_id: selectedProduct.id,
        first_name: userInfo.first_name,
        username: userInfo.username
      };

      // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ tgid –ø–æ–ª—É—á–∞–µ—Ç—Å—è –∏–∑ Telegram –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

      console.log('=== –û–¢–õ–ê–î–ö–ê –ü–û–ö–£–ü–ö–ò ===');
      console.log('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ state:', userInfo);
      console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫—É–ø–∫—É:', purchaseData);
      console.log('URL webhook:', WEBHOOK_URL);
      console.log('–¢–∏–ø tgid:', typeof purchaseData.tgid);
      console.log('–ó–Ω–∞—á–µ–Ω–∏–µ tgid:', purchaseData.tgid);
      console.log('========================');

      const response = await axios.post(WEBHOOK_URL, purchaseData, {
        headers: {
          'Content-Type': 'application/json'
        },
        timeout: 10000 // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
      });

      console.log('–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.data);

      if (response.data.success) {
        setMessage({
          type: 'success',
          text: `–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞! –ò–Ω–≤–æ–π—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram.`
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞)
        setUserInfo(prev => ({
          ...prev,
          current_xp: prev.current_xp + selectedProduct.xp
        }));
      } else {
        setMessage({
          type: 'error',
          text: response.data.error || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ'
        });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ:', error);
      setMessage({
        type: 'error',
        text: error.response?.data?.error || '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º'
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleCancelPurchase = () => {
    setShowModal(false);
    setSelectedProduct(null);
    setMessage(null);
  };

  const formatNumber = (num) => {
    return num.toLocaleString('ru-RU');
  };

  return (
    <div className="container">
      <header className="header">
        <h1>üöÄ XP Purchase System</h1>
        <p>–ü–æ–∫—É–ø–∞–π—Ç–µ XP –∑–∞ Telegram Stars (XTR)</p>
      </header>

          <div className="user-info">
            <h3>üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</h3>
            <div className="user-balance">
              <span>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å XP:</span>
              <span className="balance-amount">{formatNumber(userInfo.current_xp)} XP</span>
            </div>
          </div>

      <div className="products-grid">
        {PRODUCTS.map(product => (
          <div key={product.id} className={`product-card ${product.featured ? 'featured' : ''}`}>
            <div className="product-name">{product.name}</div>
            <div className="product-description">{product.description}</div>
            
            <div className="product-stats">
              <div className="xp-amount">
                <Zap size={20} />
                {formatNumber(product.xp)} XP
              </div>
              <div className="price">
                <Star size={20} />
                {product.price} XTR
              </div>
            </div>

            <button
              className="buy-button"
              onClick={() => handleBuyClick(product)}
              disabled={isLoading}
            >
              <ShoppingCart size={20} />
              –ö—É–ø–∏—Ç—å –∑–∞ {product.price} XTR
            </button>
          </div>
        ))}
      </div>

      {showModal && selectedProduct && (
        <div className="modal-overlay" onClick={handleCancelPurchase}>
          <div className="modal" onClick={e => e.stopPropagation()}>
            <div className="modal-header">
              <div className="modal-title">üõí –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏</div>
              <div className="modal-subtitle">
                –í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä?
              </div>
            </div>

            <div className="modal-content">
              <div className="purchase-details">
                <div className="detail-row">
                  <span className="detail-label">–¢–æ–≤–∞—Ä:</span>
                  <span className="detail-value">{selectedProduct.name}</span>
                </div>
                <div className="detail-row">
                  <span className="detail-label">–ü–æ–ª—É—á–∏—Ç–µ XP:</span>
                  <span className="detail-value">{formatNumber(selectedProduct.xp)} XP</span>
                </div>
                <div className="detail-row">
                  <span className="detail-label">–°—Ç–æ–∏–º–æ—Å—Ç—å:</span>
                  <span className="detail-value">{selectedProduct.price} XTR</span>
                </div>
                <div className="detail-row">
                  <span className="detail-label">–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</span>
                  <span className="detail-value">{formatNumber(userInfo.current_xp)} XP</span>
                </div>
                <div className="detail-row">
                  <span className="detail-label">–ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏:</span>
                  <span className="detail-value">
                    {formatNumber(userInfo.current_xp + selectedProduct.xp)} XP
                  </span>
                </div>
              </div>

              {message && (
                <div className={message.type === 'success' ? 'success-message' : 'error-message'}>
                  {message.type === 'success' ? (
                    <CheckCircle size={20} style={{ marginRight: '10px' }} />
                  ) : (
                    <XCircle size={20} style={{ marginRight: '10px' }} />
                  )}
                  {message.text}
                </div>
              )}
            </div>

            <div className="modal-actions">
              <button
                className="modal-button cancel"
                onClick={handleCancelPurchase}
                disabled={isLoading}
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button
                className="modal-button confirm"
                onClick={handleConfirmPurchase}
                disabled={isLoading}
              >
                {isLoading ? (
                  <div className="loading">
                    <div className="spinner"></div>
                    –û–±—Ä–∞–±–æ—Ç–∫–∞...
                  </div>
                ) : (
                  <>
                    <CheckCircle size={20} />
                    –î–∞, –∫—É–ø–∏—Ç—å!
                  </>
                )}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

export default App;
