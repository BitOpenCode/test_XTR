{
  "name": "XP Purchase Workflow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "xp-purchase",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "xp-purchase-webhook"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition-1",
              "leftValue": "={{ $json.tgid }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "isNotEmpty"
              }
            },
            {
              "id": "condition-2", 
              "leftValue": "={{ $json.product_id }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "isNotEmpty"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "validate-input",
      "name": "Validate Input",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM xtr_test_users WHERE tgid = {{ $json.tgid }}",
        "options": {}
      },
      "id": "check-user",
      "name": "Check User Exists",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [680, 200],
      "credentials": {
        "postgres": {
          "id": "postgres-credentials",
          "name": "PostgreSQL Database"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition-1",
              "leftValue": "={{ $json.length }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "user-exists-check",
      "name": "User Exists?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [900, 200]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO xtr_test_users (tgid, first_name, username, current_xp, total_xp_purchased, created_at, is_active) VALUES ({{ $('Webhook Trigger').item.json.tgid }}, '{{ $('Webhook Trigger').item.json.first_name || '' }}', '{{ $('Webhook Trigger').item.json.username || '' }}', 0, 0, NOW(), true) ON CONFLICT (tgid) DO NOTHING",
        "options": {}
      },
      "id": "create-user",
      "name": "Create User",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [900, 400],
      "credentials": {
        "postgres": {
          "id": "postgres-credentials",
          "name": "PostgreSQL Database"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM xp_test_products WHERE product_id = {{ $('Webhook Trigger').item.json.product_id }}",
        "options": {}
      },
      "id": "get-product",
      "name": "Get Product Info",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [1120, 300],
      "credentials": {
        "postgres": {
          "id": "postgres-credentials",
          "name": "PostgreSQL Database"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition-1",
              "leftValue": "={{ $json.length }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "product-exists-check",
      "name": "Product Exists?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO xp_test_transactions (tgid, product_id, xp_amount, price_xtr, status, created_at) VALUES ({{ $('Webhook Trigger').item.json.tgid }}, {{ $('Webhook Trigger').item.json.product_id }}, {{ $('Get Product Info').item.json.xp_amount }}, {{ $('Get Product Info').item.json.price_xtr }}, 'pending', NOW()) RETURNING transaction_id",
        "options": {}
      },
      "id": "create-transaction",
      "name": "Create Transaction",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [1560, 200],
      "credentials": {
        "postgres": {
          "id": "postgres-credentials",
          "name": "PostgreSQL Database"
        }
      }
    },
    {
      "parameters": {
        "operation": "sendInvoice",
        "chatId": "={{ $('Webhook Trigger').item.json.tgid }}",
        "title": "Покупка {{ $('Get Product Info').item.json.name }}",
        "description": "{{ $('Get Product Info').item.json.description }}",
        "payload": "{{ $('Create Transaction').item.json.transaction_id }}",
        "providerToken": "{{ $vars.TELEGRAM_BOT_TOKEN }}",
        "currency": "XTR",
        "prices": [
          {
            "label": "{{ $('Get Product Info').item.json.name }}",
            "amount": "{{ $('Get Product Info').item.json.price_xtr }}"
          }
        ],
        "options": {}
      },
      "id": "send-invoice",
      "name": "Send Invoice",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [1780, 200],
      "credentials": {
        "telegramApi": {
          "id": "telegram-credentials",
          "name": "Telegram Bot API"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE xp_test_transactions SET status = 'invoice_sent', provider_tx_id = '{{ $('Send Invoice').item.json.message_id }}' WHERE transaction_id = {{ $('Create Transaction').item.json.transaction_id }}",
        "options": {}
      },
      "id": "update-transaction-sent",
      "name": "Update Transaction Status",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [2000, 200],
      "credentials": {
        "postgres": {
          "id": "postgres-credentials",
          "name": "PostgreSQL Database"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { \"success\": true, \"message\": \"Инвойс отправлен в Telegram\", \"transaction_id\": $('Create Transaction').item.json.transaction_id, \"tgid\": $('Webhook Trigger').item.json.tgid, \"product_id\": $('Webhook Trigger').item.json.product_id, \"xp_amount\": $('Get Product Info').item.json.xp_amount, \"price_xtr\": $('Get Product Info').item.json.price_xtr, \"timestamp\": new Date().toISOString() } }}",
        "options": {}
      },
      "id": "success-response",
      "name": "Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2220, 200]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { \"success\": false, \"message\": \"Неверные данные: требуется tgid и product_id\" } }}",
        "options": {}
      },
      "id": "error-response-validation",
      "name": "Error Response - Validation",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [680, 400]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { \"success\": false, \"message\": \"Товар не найден\" } }}",
        "options": {}
      },
      "id": "error-response-product",
      "name": "Error Response - Product",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1560, 400]
    }
  ],
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Validate Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Input": {
      "main": [
        [
          {
            "node": "Check User Exists",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error Response - Validation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check User Exists": {
      "main": [
        [
          {
            "node": "User Exists?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "User Exists?": {
      "main": [
        [
          {
            "node": "Get Product Info",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create User",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create User": {
      "main": [
        [
          {
            "node": "Get Product Info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Product Info": {
      "main": [
        [
          {
            "node": "Product Exists?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Product Exists?": {
      "main": [
        [
          {
            "node": "Create Transaction",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error Response - Product",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Transaction": {
      "main": [
        [
          {
            "node": "Send Invoice",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Invoice": {
      "main": [
        [
          {
            "node": "Update Transaction Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Transaction Status": {
      "main": [
        [
          {
            "node": "Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2024-01-01T00:00:00.000Z",
  "versionId": "1"
}
